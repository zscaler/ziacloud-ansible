---
- name: List all DLP Web Rules
  zscaler.ziacloud.zia_dlp_web_rules_info:
    provider: "{{ zia_cloud }}"
  register: all_dlp_rules

- name: Delete all DLP Web Rules üí•
  zscaler.ziacloud.zia_dlp_web_rules:
    provider: "{{ zia_cloud }}"
    state: absent
    name: "{{ item.name }}"
  loop: "{{ all_dlp_rules.rules }}"
  when: all_dlp_rules.rules is defined

- name: List all DLP Templates
  zscaler.ziacloud.zia_dlp_notification_template_info:
    provider: "{{ zia_cloud }}"
  register: all_dlp_templates

- name: Delete all DLP DLP Templates üí•
  zscaler.ziacloud.zia_dlp_notification_template:
    provider: "{{ zia_cloud }}"
    state: absent
    name: "{{ item.name }}"
  loop: "{{ all_dlp_templates.templates }}"
  when: all_dlp_templates.templates is defined

- name: List all Cloud Firewall Rules
  zscaler.ziacloud.zia_cloud_firewall_rule_info:
    provider: "{{ zia_cloud }}"
  register: all_firewall_rules

- name: Delete all Cloud Firewall Rules üí•
  zscaler.ziacloud.zia_cloud_firewall_rule:
    provider: "{{ zia_cloud }}"
    state: absent
    name: "{{ item.name }}"
  loop: "{{ all_firewall_rules.rules }}"
  when: all_firewall_rules.rules is defined

- name: List all URL Filtering Rules
  zscaler.ziacloud.zia_url_filtering_rule_info:
    provider: "{{ zia_cloud }}"
  register: all_url_rules

- name: Delete all URL Filtering Rules üí•
  zscaler.ziacloud.zia_url_filtering_rules:
    provider: "{{ zia_cloud }}"
    state: absent
    name: "{{ item.name }}"
  loop: "{{ all_url_rules.rules }}"
  when: all_url_rules.rules is defined

- name: List all URL Categories
  zscaler.ziacloud.zia_url_categories_info:
    provider: "{{ zia_cloud }}"
  register: all_categories

- name: Delete all custom URL Categories üí•
  zscaler.ziacloud.zia_url_categories:
    provider: "{{ zia_cloud }}"
    state: absent
    name: "{{ item.name }}"
  loop: "{{ all_categories.categories }}"
  when:
    - all_categories.categories is defined
    - item.custom_category is defined and item.custom_category
  register: delete_result

- name: List all Locations
  zscaler.ziacloud.zia_location_management_info:
    provider: "{{ zia_cloud }}"
  register: all_locations

- name: Delete all Locations üí•
  zscaler.ziacloud.zia_location_management:
    provider: "{{ zia_cloud }}"
    state: absent
    name: "{{ item.name }}"
  loop: "{{ all_locations.locations }}"
  when: all_locations.locations is defined

- name: List all Rule Labels
  zscaler.ziacloud.zia_rule_labels_info:
    provider: "{{ zia_cloud }}"
  register: all_rule_labels

- name: Delete all Rule Labels üí•
  zscaler.ziacloud.zia_rule_labels:
    provider: "{{ zia_cloud }}"
    state: absent
    name: "{{ item.name }}"
  loop: "{{ all_rule_labels.labels }}"
  when: all_rule_labels.labels is defined

- name: List all IP Destination Groups
  zscaler.ziacloud.zia_cloud_firewall_ip_destination_groups_info:
    provider: "{{ zia_cloud }}"
  register: all_ip_dest_groups

- name: Delete all IP Destination Groups üí•
  zscaler.ziacloud.zia_cloud_firewall_ip_destination_groups:
    provider: "{{ zia_cloud }}"
    state: absent
    name: "{{ item.name }}"
  loop: "{{ all_ip_dest_groups.groups }}"
  when: all_ip_dest_groups.groups is defined

- name: List all IP Source Groups
  zscaler.ziacloud.zia_cloud_firewall_ip_source_groups_info:
    provider: "{{ zia_cloud }}"
  register: all_ip_source_groups

- name: Delete all IP Source Groups üí•
  zscaler.ziacloud.zia_cloud_firewall_ip_source_groups:
    provider: "{{ zia_cloud }}"
    state: absent
    name: "{{ item.name }}"
    ip_addresses: "{{ item.ip_addresses }}"
  loop: "{{ all_ip_source_groups.groups }}"
  when: all_ip_source_groups.groups is defined

- name: List all Network Services
  zscaler.ziacloud.zia_cloud_firewall_network_services_info:
    provider: "{{ zia_cloud }}"
  register: all_network_services

- name: Delete all Network Services üí•
  zscaler.ziacloud.zia_cloud_firewall_network_services:
    provider: "{{ zia_cloud }}"
    state: absent
    name: "{{ item.name }}"
  loop: "{{ all_network_services.services | rejectattr('type', 'in', ['PREDEFINED', 'STANDARD']) | list }}"
  when: all_network_services.services is defined

- name: List all NAT Control Rules
  zscaler.ziacloud.zia_nat_control_policy_info:
    provider: "{{ zia_cloud }}"
  register: all_nat_rules

- name: Delete all NAT Control Rules üí•
  zscaler.ziacloud.zia_nat_control_policy:
    provider: "{{ zia_cloud }}"
    state: absent
    name: "{{ item.name }}"
  loop: "{{ all_nat_rules.rules }}"
  when: all_nat_rules.rules is defined

- name: List all SSL Inspection Rules
  zscaler.ziacloud.zia_ssl_inspection_rules_info:
    provider: "{{ zia_cloud }}"
  register: all_ssl_rules

- name: Delete all SSL Inspection Rules üí•
  zscaler.ziacloud.zia_ssl_inspection_rules:
    provider: "{{ zia_cloud }}"
    state: absent
    name: "{{ item.name }}"
  loop: "{{ all_ssl_rules.rules }}"
  when: all_ssl_rules.rules is defined

- name: List all Sandbox Rules
  zscaler.ziacloud.zia_sandbox_rules_info:
    provider: "{{ zia_cloud }}"
  register: all_sandbox_rules

- name: Delete all Sandbox Rules üí•
  zscaler.ziacloud.zia_sandbox_rules_rules:
    provider: "{{ zia_cloud }}"
    state: absent
    name: "{{ item.name }}"
  loop: "{{ all_sandbox_rules.rules }}"
  when: all_sandbox_rules.rules is defined

- name: List all File Type Control Rules
  zscaler.ziacloud.zia_file_type_control_rules_info:
    provider: "{{ zia_cloud }}"
  register: all_file_type_control_rules

- name: Delete all File Type Control Rules üí•
  zscaler.ziacloud.zia_file_type_control_rules:
    provider: "{{ zia_cloud }}"
    state: absent
    name: "{{ item.name }}"
  loop: "{{ all_file_type_control_rules.rules }}"
  when: all_file_type_control_rules.rules is defined

- name: List all Forwarding Control Rules
  zscaler.ziacloud.zia_forwarding_control_rule_info:
    provider: "{{ zia_cloud }}"
  register: all_forwarding_rules

- name: Delete all Forwarding Control Rules üí•
  zscaler.ziacloud.zia_forwarding_control_rule:
    provider: "{{ zia_cloud }}"
    state: absent
    name: "{{ item.name }}"
  loop: "{{ all_forwarding_rules.rules }}"
  when: all_forwarding_rules.rules is defined

- name: List all NSS Servers
  zscaler.ziacloud.zia_nss_servers_info:
    provider: "{{ zia_cloud }}"
  register: all_nss_servers

- name: Delete all NSS Servers üí•
  zscaler.ziacloud.zia_nss_servers:
    provider: "{{ zia_cloud }}"
    state: absent
    name: "{{ item.name }}"
  loop: "{{ all_nss_servers.rules }}"
  when: all_nss_servers.rules is defined

- name: Set fact for each task status
  ansible.builtin.set_fact:
    cloud_firewall_rules_failed: "{{ all_firewall_rules.failed | default(false) }}"
    dlp_web_rules_failed: "{{ all_dlp_rules.failed | default(false) }}"
    dlp_template_failed: "{{ all_dlp_templates.failed | default(false) }}"
    url_categories_failed: "{{ all_categories.failed | default(false) }}"
    url_rules_failed: "{{ all_url_rules.failed | default(false) }}"
    locations_failed: "{{ all_locations.failed | default(false) }}"
    rule_labels_failed: "{{ all_rule_labels.failed | default(false) }}"
    ip_dest_groups_failed: "{{ all_ip_dest_groups.failed | default(false) }}"
    ip_source_groups_failed: "{{ all_ip_source_groups.failed | default(false) }}"
    network_services_failed: "{{ all_network_services.failed | default(false) }}"
    nat_control_rules_failed: "{{ all_nat_rules.failed | default(false) }}"
    ssl_inspection_rules_failed: "{{ all_ssl_rules.failed | default(false) }}"
    sandbox_rules_failed: "{{ all_sandbox_rules.failed | default(false) }}"
    file_type_control_rules_failed: "{{ all_file_type_control_rules.failed | default(false) }}"
    forwarding_rules_failed: "{{ all_forwarding_rules.failed | default(false) }}"
    nss_servers_failed: "{{ all_nss_servers.failed | default(false) }}"

- name: Set fact for overall status
  ansible.builtin.set_fact:
    sweep_successful: >-
      {{
        not (
          cloud_firewall_rules_failed or
          dlp_web_rules_failed or
          dlp_template_failed or
          url_categories_failed or
          url_rules_failed or
          locations_failed or
          rule_labels_failed or
          ip_dest_groups_failed or
          ip_source_groups_failed or
          network_services_failed or
          nat_control_rules_failed or
          ssl_inspection_rules_failed or
          sandbox_rules_failed or
          file_type_control_rules_failed or
          forwarding_rules_failed or
          nss_servers_failed
        )
      }}

- name: Print success message ‚úÖ
  ansible.builtin.debug:
    msg: Tenant sweep successfully completed!
  when: sweep_successful

- name: Print failure message ‚ùå
  ansible.builtin.debug:
    msg: Tenant sweep incomplete. Please check the above logs for errors.
  when: not sweep_successful
