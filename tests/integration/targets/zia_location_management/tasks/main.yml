---
- name: Include default variables
  ansible.builtin.include_vars:
    file: ../defaults/main.yml

- name: Import Random String Generator Tasks
  ansible.builtin.import_tasks: ../../../generate_random_string.yml

- name: Set dynamic name values with random string
  ansible.builtin.set_fact:
    location_name: "{{ location_name }}_{{ random_string }}"

- name: Create UFQDN VPN Credential
  ansible.builtin.include_tasks: ../../../helper_tasks/zia_traffic_forwarding_vpn_credentials/create_ufqdn_vpn_credentials.yml

- name: Verify UFQDN VPN Credential
  ansible.builtin.include_tasks: ../../../helper_tasks/zia_traffic_forwarding_vpn_credentials/verify_ufqdn_vpn_credentials.yml

- name: Ensure required environment variables are set
  ansible.builtin.fail:
    msg: "{{ env_var }} is not defined as environment variable"
  when: lookup('env', env_var) is none
  loop:
    - ZSCALER_CLIENT_ID
    - ZSCALER_CLIENT_SECRET
    - ZSCALER_VANITY_DOMAIN
    - ZSCALER_CLOUD
  loop_control:
    loop_var: env_var

- name: Ensure ZIA Credential environment variables are set
  ansible.builtin.set_fact:
    zia_cloud:
      client_id: "{{ lookup('env', 'ZSCALER_CLIENT_ID') }}"
      client_secret: "{{ lookup('env', 'ZSCALER_CLIENT_SECRET') }}"
      vanity_domain: "{{ lookup('env', 'ZSCALER_VANITY_DOMAIN') }}"
      cloud: "{{ lookup('env', 'ZSCALER_CLOUD') | default(omit) }}"
  no_log: true

- name: Main block to Test Location Management Configuration
  block:
    - name: Ensure Location is absent (leftover)
      zscaler.ziacloud.zia_location_management:
        provider: "{{ zia_cloud }}"
        state: absent
        name: "{{ location_name }}"
      register: result

  rescue:
    - name: Handle errors
      ansible.builtin.debug:
        msg: An error occurred.

  always:
    - name: Cleanup operations
      ansible.builtin.debug:
        msg: Cleanup complete.

    - name: Ensure Location is absent
      zscaler.ziacloud.zia_location_management:
        provider: "{{ zia_cloud }}"
        state: absent
        name: "{{ location_name }}"
      register: result

    - name: Verify Location is absent
      ansible.builtin.assert:
        that:
          - not result.changed

    - name: Ensure Location is (Present)
      zscaler.ziacloud.zia_location_management:
        provider: "{{ zia_cloud }}"
        state: present
        name: "{{ location_name }}"
        description: "{{ description }}"
        country: "{{ country }}"
        tz: "{{ tz }}"
        auth_required: "{{ auth_required }}"
        idle_time_in_minutes: "{{ idle_time_in_minutes }}"
        display_time_unit: "{{ display_time_unit }}"
        surrogate_ip: "{{ surrogate_ip }}"
        xff_forward_enabled: "{{ xff_forward_enabled }}"
        ofw_enabled: "{{ ofw_enabled }}"
        ips_control: "{{ ips_control }}"
        profile: "{{ profile }}"
        vpn_credentials:
          - id: "{{ vpn_id }}"
            type: "{{ help_type }}"
      register: result

    - name: Set fact for expected change
      ansible.builtin.set_fact:
        is_location_creation: "{{ result.changed }}"

    - name: Verify Location is Present
      ansible.builtin.assert:
        that:
          - (is_location_creation or not result.changed)
          - result.data is defined
          - result.data.name is defined
          - result.data.name == location_name
          - result.data.description is defined
          - result.data.description == description

    - name: Ensure Location is (again; idempotency check)
      zscaler.ziacloud.zia_location_management:
        provider: "{{ zia_cloud }}"
        state: present
        name: "{{ location_name }}"
        description: "{{ description }}"
        country: "{{ country }}"
        tz: "{{ tz }}"
        auth_required: "{{ auth_required }}"
        idle_time_in_minutes: "{{ idle_time_in_minutes }}"
        display_time_unit: "{{ display_time_unit }}"
        surrogate_ip: "{{ surrogate_ip }}"
        xff_forward_enabled: "{{ xff_forward_enabled }}"
        ofw_enabled: "{{ ofw_enabled }}"
        ips_control: "{{ ips_control }}"
        profile: "{{ profile }}"
        vpn_credentials:
          - id: "{{ vpn_id }}"
            type: "{{ help_type }}"
      register: result

    - name: Set fact for expected change
      ansible.builtin.set_fact:
        is_location_creation: "{{ result.changed }}"

    - name: Verify Location is Present
      ansible.builtin.assert:
        that:
          - (is_location_creation or not result.changed)
          - result.data is defined
          - result.data.name is defined
          - result.data.name == location_name
          - result.data.description is defined
          - result.data.description == description

    - name: Fetch All Locations
      zscaler.ziacloud.zia_location_management_info:
        provider: "{{ zia_cloud }}"
      register: result

    - name: Ensure all Locations found
      ansible.builtin.assert:
        that:
          - not result.changed
          - result.locations is defined

    - name: Fetch this Location
      zscaler.ziacloud.zia_location_management_info:
        provider: "{{ zia_cloud }}"
        name: "{{ location_name }}"
      register: result

    - name: Ensure this Location is found
      ansible.builtin.assert:
        that:
          - not result.changed
          - result.locations is defined
          - result.locations[0].name is defined
          - result.locations[0].name == location_name

    - name: Give the ZIA Cloud a 5 seconds to settle
      ansible.builtin.pause:
        seconds: 5

    - name: Check if Location Exists
      zscaler.ziacloud.zia_location_management_info:
        provider: "{{ zia_cloud }}"
        name: "{{ location_name }}"
      register: location_check

    - name: Delete Location if Exists
      zscaler.ziacloud.zia_location_management:
        provider: "{{ zia_cloud }}"
        state: absent
        name: "{{ location_name }}"
      when: location_check.locations | length > 0
      register: deletion_result

    - name: Verify Location was Deleted
      ansible.builtin.assert:
        that:
          - deletion_result.changed

    - name: Verify Idempotency
      zscaler.ziacloud.zia_location_management:
        provider: "{{ zia_cloud }}"
        state: absent
        name: "{{ location_name }}"
      register: idempotent_check

    - name: Assert No Change on Second Deletion Attempt
      ansible.builtin.assert:
        that:
          - not idempotent_check.changed

- name: Clean up VPN Credentials
  ansible.builtin.include_tasks: ../../../helper_tasks/zia_traffic_forwarding_vpn_credentials/delete_ufqdn_vpn_credentials.yml
