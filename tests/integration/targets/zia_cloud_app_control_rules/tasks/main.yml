---
- name: Include default variables
  ansible.builtin.include_vars:
    file: ../defaults/main.yml

- name: Import Random String Generator Tasks
  ansible.builtin.import_tasks: ../../../generate_random_string.yml

- name: Set dynamic name values with random string
  ansible.builtin.set_fact:
    rule_name: "{{ rule_name }}_{{ random_string }}"
    description: "{{ description }}_{{ random_string }}"
    description_update: "{{ description_update }}_{{ random_string }}"

- name: Ensure required environment variables are set
  ansible.builtin.fail:
    msg: "{{ env_var }} is not defined as environment variable"
  when: lookup('env', env_var) is none
  loop:
    - ZIA_USERNAME
    - ZIA_PASSWORD
    - ZIA_API_KEY
    - ZIA_CLOUD
  loop_control:
    loop_var: env_var

- name: Ensure ZIA Credential environment variables are set
  ansible.builtin.set_fact:
    zia_cloud:
      username: "{{ lookup('env', 'ZIA_USERNAME') }}"
      password: "{{ lookup('env', 'ZIA_PASSWORD') }}"
      api_key: "{{ lookup('env', 'ZIA_API_KEY') }}"
      cloud: "{{ lookup('env', 'ZIA_CLOUD') | default(omit) }}"
  no_log: true

- name: Main block to Test Cloud App Control Rule Configuration
  block:
    - name: Ensure Cloud App Control Rule (leftover)
      zscaler.ziacloud.zia_cloud_app_control_rules:
        provider: "{{ zia_cloud }}"
        state: absent
        name: "{{ rule_name }}"
        rule_type: "{{ rule_type }}"
      register: result

  rescue:
    - name: Handle errors
      ansible.builtin.debug:
        msg: An error occurred.

  always:
    - name: Cleanup operations
      ansible.builtin.debug:
        msg: Cleanup complete.

    - name: Ensure Cloud App Control Rule is absent
      zscaler.ziacloud.zia_cloud_app_control_rules:
        provider: "{{ zia_cloud }}"
        state: absent
        name: "{{ rule_name }}"
        rule_type: "{{ rule_type }}"
      register: result

    - name: Verify Cloud App Control Rule is absent
      ansible.builtin.assert:
        that:
          - not result.changed
          - result.data is defined

    - name: Ensure Cloud App Control Rule is (Present)
      zscaler.ziacloud.zia_cloud_app_control_rules:
        provider: "{{ zia_cloud }}"
        state: present
        name: "{{ rule_name }}"
        description: "{{ description }}"
        rule_type: WEBMAIL
        actions: "{{ actions }}"
        order: "{{ rule_order }}"
        enabled: "{{ enabled }}"
        applications: "{{ applications }}"
        device_trust_levels: "{{ device_trust_levels }}"
      register: result

    - name: Verify Cloud App Control Rule is present
      ansible.builtin.assert:
        that:
          - result.changed
          - result.data is defined
          - result.data.name is defined

    - name: Ensure Cloud App Control Rule (again; idempotency check)
      zscaler.ziacloud.zia_cloud_app_control_rules:
        provider: "{{ zia_cloud }}"
        state: present
        name: "{{ rule_name }}"
        description: "{{ description }}"
        rule_type: WEBMAIL
        actions: "{{ actions }}"
        order: "{{ rule_order }}"
        enabled: "{{ enabled }}"
        applications: "{{ applications }}"
        device_trust_levels: "{{ device_trust_levels }}"
      register: result

    - name: Ensure Cloud App Control Rule is present (idempotency check)
      ansible.builtin.assert:
        that:
          - not result.changed

    - name: Update Cloud App Control Rule (Present)
      zscaler.ziacloud.zia_cloud_app_control_rules:
        provider: "{{ zia_cloud }}"
        state: present
        name: "{{ rule_name }}"
        description: "{{ description_update }}"
        rule_type: "{{ rule_type }}"
        actions: "{{ actions }}"
        order: "{{ rule_order }}"
        enabled: "{{ enabled }}"
        applications: "{{ applications }}"
        device_trust_levels: "{{ device_trust_levels }}"
      register: result

    - name: Verify Cloud App Control Rule is Updated
      ansible.builtin.assert:
        that:
          - result.changed
          - result.data is defined
          - result.data.name == rule_name
          - result.data.description == description_update

    - name: Ensure Cloud App Control Rule is Updated (again; idempotency check)
      zscaler.ziacloud.zia_cloud_app_control_rules:
        provider: "{{ zia_cloud }}"
        state: present
        name: "{{ rule_name }}"
        description: "{{ description_update }}"
        rule_type: "{{ rule_type }}"
        actions: "{{ actions }}"
        order: "{{ rule_order }}"
        enabled: "{{ enabled }}"
        applications: "{{ applications }}"
        device_trust_levels: "{{ device_trust_levels }}"
      register: result

    - name: Ensure Cloud App Control Rule update is idempotent
      ansible.builtin.assert:
        that:
          - not result.changed

    - name: Fetch all Cloud App Control Rule
      zscaler.ziacloud.zia_cloud_app_control_rules_info:
        provider: "{{ zia_cloud }}"
        rule_type: "WEBMAIL"
      register: result

    - name: Ensure all Cloud App Control Rule found
      ansible.builtin.assert:
        that:
          - not result.changed
          - result.rules[0] is defined

    - name: Fetch this Cloud App Control Rule
      zscaler.ziacloud.zia_cloud_app_control_rules_info:
        provider: "{{ zia_cloud }}"
        name: "{{ rule_name }}"
        rule_type: "WEBMAIL"
      register: result

    - name: Ensure this Cloud App Control Rule is found
      ansible.builtin.assert:
        that:
          - not result.changed
          - result.rules is defined
          - result.rules[0].name is defined
          - result.rules[0].name == rule_name

    - name: Give the ZIA Cloud a 5 seconds to settle
      ansible.builtin.pause:
        seconds: 5

    - name: Delete Cloud App Control Rule
      zscaler.ziacloud.zia_cloud_app_control_rules:
        provider: "{{ zia_cloud }}"
        state: absent
        name: "{{ rule_name }}"
        rule_type: "WEBMAIL"
      register: result

    - name: Verify Cloud App Control Rule is Deleted
      ansible.builtin.assert:
        that:
          - result.changed

    - name: Delete Cloud App Control Rule (again; idempotency check)
      zscaler.ziacloud.zia_cloud_app_control_rules:
        provider: "{{ zia_cloud }}"
        state: absent
        name: "{{ rule_name }}"
        rule_type: "WEBMAIL"
      register: result

    - name: Verify Cloud App Control Rule is absent
      ansible.builtin.assert:
        that:
          - not result.changed
          - result.data is defined
