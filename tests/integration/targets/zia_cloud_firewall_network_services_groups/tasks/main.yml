---
- name: Include default variables
  ansible.builtin.include_vars:
    file: ../defaults/main.yml

- name: Import Random String Generator Tasks
  ansible.builtin.import_tasks: ../../../generate_random_string.yml

- name: Import Network Services ID
  ansible.builtin.include_tasks: ../../../helper_tasks/zia_cloud_firewall_network_services/zia_cloud_firewall_network_services_info.yml

- name: Set dynamic name values with random string
  ansible.builtin.set_fact:
    group_name: "{{ group_name }}_{{ random_string }}"
    description: "{{ description }}_{{ random_string }}"

- name: Ensure required environment variables are set
  ansible.builtin.fail:
    msg: "{{ env_var }} is not defined as environment variable"
  when: lookup('env', env_var) is none
  loop:
    - ZSCALER_CLIENT_ID
    - ZSCALER_CLIENT_SECRET
    - ZSCALER_VANITY_DOMAIN
    - ZSCALER_CLOUD
  loop_control:
    loop_var: env_var

- name: Ensure ZIA Credential environment variables are set
  ansible.builtin.set_fact:
    zia_cloud:
      client_id: "{{ lookup('env', 'ZSCALER_CLIENT_ID') }}"
      client_secret: "{{ lookup('env', 'ZSCALER_CLIENT_SECRET') }}"
      vanity_domain: "{{ lookup('env', 'ZSCALER_VANITY_DOMAIN') }}"
      cloud: "{{ lookup('env', 'ZSCALER_CLOUD') | default(omit) }}"
  no_log: true

- name: Main block to Test Cloud Firewall Network Services Groups Configuration
  block:
    # Network Services Group
    - name: Ensure Network Services Group (leftover)
      zscaler.ziacloud.zia_cloud_firewall_network_services_groups:
        provider: "{{ zia_cloud }}"
        state: absent
        name: "{{ group_name }}"
        service_ids:
          - "{{ service_id0 }}"
          - "{{ service_id1 }}"
          - "{{ service_id2 }}"
      register: result

  rescue:
    - name: Handle errors
      ansible.builtin.debug:
        msg: An error occurred.

  always:
    - name: Cleanup operations
      ansible.builtin.debug:
        msg: Cleanup complete.

    - name: Ensure Network Services Group is absent
      zscaler.ziacloud.zia_cloud_firewall_network_services_groups:
        provider: "{{ zia_cloud }}"
        state: absent
        name: "{{ group_name }}"
        service_ids:
          - "{{ service_id0 }}"
          - "{{ service_id1 }}"
          - "{{ service_id2 }}"
      register: result

    - name: Verify Network Services Group is absent
      ansible.builtin.assert:
        that:
          - not result.changed
          - result.data is defined

    - name: Ensure Network Services Group is (Present)
      zscaler.ziacloud.zia_cloud_firewall_network_services_groups:
        provider: "{{ zia_cloud }}"
        state: present
        name: "{{ group_name }}"
        description: "{{ description }}"
        service_ids:
          - "{{ service_id0 }}"
          - "{{ service_id1 }}"
          - "{{ service_id2 }}"
      register: result

    - name: Verify Network Services Group is present
      ansible.builtin.assert:
        that:
          - result.changed
          - result.data.name is defined

    - name: Ensure Network Services Group (again; idempotency check)
      zscaler.ziacloud.zia_cloud_firewall_network_services_groups:
        provider: "{{ zia_cloud }}"
        state: present
        name: "{{ group_name }}"
        description: "{{ description }}"
        service_ids:
          - "{{ service_id0 }}"
          - "{{ service_id1 }}"
          - "{{ service_id2 }}"
      register: result

    - name: Ensure Network Services Group is absent (idempotency check)
      ansible.builtin.assert:
        that:
          - not result.changed

    - name: Fetch all Network Services Group
      zscaler.ziacloud.zia_cloud_firewall_network_services_groups_info:
        provider: "{{ zia_cloud }}"
      register: result

    - name: Ensure all Network Services Group found
      ansible.builtin.assert:
        that:
          - not result.changed
          - result.groups is defined

    - name: Fetch this Network Services Group
      zscaler.ziacloud.zia_cloud_firewall_network_services_groups_info:
        provider: "{{ zia_cloud }}"
        name: "{{ group_name }}"
      register: result

    - name: Ensure this Network Services Group is found
      ansible.builtin.assert:
        that:
          - not result.changed
          - result.groups is defined
          - result.groups[0].name is defined
          - result.groups[0].name == group_name

    - name: Give the ZIA Cloud a 5 seconds to settle
      ansible.builtin.pause:
        seconds: 5

    - name: Delete Network Services Group
      zscaler.ziacloud.zia_cloud_firewall_network_services_groups:
        provider: "{{ zia_cloud }}"
        state: absent
        name: "{{ group_name }}"
        service_ids:
          - "{{ service_id0 }}"
          - "{{ service_id1 }}"
          - "{{ service_id2 }}"
      register: result

    - name: Verify Network Services Group is Deleted
      ansible.builtin.assert:
        that:
          - result.changed

    - name: Delete Network Services Group (again; idempotency check)
      zscaler.ziacloud.zia_cloud_firewall_network_services_groups:
        provider: "{{ zia_cloud }}"
        state: absent
        name: "{{ group_name }}"
        service_ids:
          - "{{ service_id0 }}"
          - "{{ service_id1 }}"
          - "{{ service_id2 }}"
      register: result

    - name: Verify Network Services Group is absent
      ansible.builtin.assert:
        that:
          - not result.changed
          - result.data is defined
