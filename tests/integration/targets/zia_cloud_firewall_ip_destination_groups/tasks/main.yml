---
- name: Include default variables
  ansible.builtin.include_vars:
    file: ../defaults/main.yml

- name: Import Random String Generator Tasks
  ansible.builtin.import_tasks: ../../../generate_random_string.yml

- name: Set dynamic name values with random string
  ansible.builtin.set_fact:
    group_name: "{{ group_name }}_{{ random_string }}"
    description: "{{ description }}_{{ random_string }}"

- name: Ensure required environment variables are set
  ansible.builtin.fail:
    msg: "{{ env_var }} is not defined as environment variable"
  when: lookup('env', env_var) is none
  loop:
    - ZSCALER_CLIENT_ID
    - ZSCALER_CLIENT_SECRET
    - ZSCALER_VANITY_DOMAIN
    - ZSCALER_CLOUD
  loop_control:
    loop_var: env_var

- name: Ensure ZIA Credential environment variables are set
  ansible.builtin.set_fact:
    zia_cloud:
      client_id: "{{ lookup('env', 'ZSCALER_CLIENT_ID') }}"
      client_secret: "{{ lookup('env', 'ZSCALER_CLIENT_SECRET') }}"
      vanity_domain: "{{ lookup('env', 'ZSCALER_VANITY_DOMAIN') }}"
      cloud: "{{ lookup('env', 'ZSCALER_CLOUD') | default(omit) }}"
  no_log: true

- name: Main block to Test Cloud Firewall IP Destination Group Configuration
  block:
    # IP Destination Group of Type DSTN_IP
    - name: Ensure Destination Group of Type DSTN_IP (leftover)
      zscaler.ziacloud.zia_cloud_firewall_ip_destination_groups:
        provider: "{{ zia_cloud }}"
        state: absent
        name: "{{ group_name }}"
      register: result

  rescue:
    - name: Handle errors
      ansible.builtin.debug:
        msg: An error occurred.

  always:
    - name: Cleanup operations
      ansible.builtin.debug:
        msg: Cleanup complete.

    - name: Ensure Destination Group of Type DSTN_IP is absent
      zscaler.ziacloud.zia_cloud_firewall_ip_destination_groups:
        provider: "{{ zia_cloud }}"
        state: absent
        name: "{{ group_name }}"
      register: result

    - name: Verify Destination Group of Type DSTN_IP is absent
      ansible.builtin.assert:
        that:
          - not result.changed
          - result.data is defined

    - name: Ensure Destination Group of Type DSTN_IP is (Present)
      zscaler.ziacloud.zia_cloud_firewall_ip_destination_groups:
        provider: "{{ zia_cloud }}"
        state: present
        name: "{{ group_name }}"
        description: "{{ description }}"
        type: "{{ type_dst_ip }}"
        addresses: "{{ addresses_dst_ip }}"
      register: result

    - name: Verify Destination Group of Type DSTN_IP is present
      ansible.builtin.assert:
        that:
          - result.changed
          - result.data.name is defined

    - name: Ensure Destination Group of Type DSTN_IP (again; idempotency check)
      zscaler.ziacloud.zia_cloud_firewall_ip_destination_groups:
        provider: "{{ zia_cloud }}"
        state: present
        name: "{{ group_name }}"
        description: "{{ description }}"
        type: "{{ type_dst_ip }}"
        addresses: "{{ addresses_dst_ip }}"
      register: result

    - name: Ensure Destination Group of Type DSTN_IP is absent (idempotency check)
      ansible.builtin.assert:
        that:
          - not result.changed

    - name: Fetch all Destination Group of Type DSTN_IP
      zscaler.ziacloud.zia_cloud_firewall_ip_destination_groups_info:
        provider: "{{ zia_cloud }}"
      register: result

    - name: Ensure all Destination Group of Type DSTN_IP found
      ansible.builtin.assert:
        that:
          - not result.changed
          - result.groups[0] is defined

    - name: Fetch this Destination Group of Type DSTN_IP
      zscaler.ziacloud.zia_cloud_firewall_ip_destination_groups_info:
        provider: "{{ zia_cloud }}"
        name: "{{ group_name }}"
      register: result

    - name: Ensure this Destination Group of Type DSTN_IP is found
      ansible.builtin.assert:
        that:
          - not result.changed
          - result.groups is defined
          - result.groups[0].name is defined
          - result.groups[0].name == group_name

    - name: Give the ZIA Cloud a 5 seconds to settle
      ansible.builtin.pause:
        seconds: 5

    - name: Delete Destination Group of Type DSTN_IP
      zscaler.ziacloud.zia_cloud_firewall_ip_destination_groups:
        provider: "{{ zia_cloud }}"
        state: absent
        name: "{{ group_name }}"
      register: result

    - name: Verify Destination Group of Type DSTN_IP is Deleted
      ansible.builtin.assert:
        that:
          - result.changed

    - name: Delete Destination Group of Type DSTN_IP (again; idempotency check)
      zscaler.ziacloud.zia_cloud_firewall_ip_destination_groups:
        provider: "{{ zia_cloud }}"
        state: absent
        name: "{{ group_name }}"
      register: result

    - name: Verify Destination Group of Type DSTN_IP is absent
      ansible.builtin.assert:
        that:
          - not result.changed
          - result.data is defined

    # IP Destination Group of Type DSTN_FQDN
    - name: Ensure Destination Group of Type DSTN_FQDN (leftover)
      zscaler.ziacloud.zia_cloud_firewall_ip_destination_groups:
        provider: "{{ zia_cloud }}"
        state: absent
        name: "{{ group_name }}"
      register: result

    - name: Ensure Destination Group of Type DSTN_FQDN is absent
      zscaler.ziacloud.zia_cloud_firewall_ip_destination_groups:
        provider: "{{ zia_cloud }}"
        state: absent
        name: "{{ group_name }}"
      register: result

    - name: Verify Destination Group of Type DSTN_FQDN is absent
      ansible.builtin.assert:
        that:
          - not result.changed
          - result.data is defined

    - name: Ensure Destination Group of Type DSTN_FQDN is (Present)
      zscaler.ziacloud.zia_cloud_firewall_ip_destination_groups:
        provider: "{{ zia_cloud }}"
        state: present
        name: "{{ group_name }}"
        description: "{{ description }}"
        type: "{{ type_dst_fqdn }}"
        addresses: "{{ addresses_dst_fqdn }}"
      register: result

    - name: Verify Destination Group of Type DSTN_FQDN is present
      ansible.builtin.assert:
        that:
          - result.changed
          - result.data.name is defined

    - name: Ensure Destination Group of Type DSTN_FQDN (again; idempotency check)
      zscaler.ziacloud.zia_cloud_firewall_ip_destination_groups:
        provider: "{{ zia_cloud }}"
        state: present
        name: "{{ group_name }}"
        description: "{{ description }}"
        type: "{{ type_dst_fqdn }}"
        addresses: "{{ addresses_dst_fqdn }}"
      register: result

    - name: Ensure Destination Group of Type DSTN_FQDN is absent (idempotency check)
      ansible.builtin.assert:
        that:
          - not result.changed

    - name: Fetch all Destination Group of Type DSTN_FQDN
      zscaler.ziacloud.zia_cloud_firewall_ip_destination_groups_info:
        provider: "{{ zia_cloud }}"
      register: result

    - name: Ensure all Destination Group of Type DSTN_FQDN found
      ansible.builtin.assert:
        that:
          - not result.changed
          - result.groups[0] is defined

    - name: Fetch this Destination Group of Type DSTN_FQDN
      zscaler.ziacloud.zia_cloud_firewall_ip_destination_groups_info:
        provider: "{{ zia_cloud }}"
        name: "{{ group_name }}"
      register: result

    - name: Ensure this Destination Group of Type DSTN_FQDN is found
      ansible.builtin.assert:
        that:
          - not result.changed
          - result.groups is defined
          - result.groups[0].name is defined
          - result.groups[0].name == group_name

    - name: Give the ZIA Cloud a 5 seconds to settle
      ansible.builtin.pause:
        seconds: 5

    - name: Delete Destination Group of Type DSTN_FQDN
      zscaler.ziacloud.zia_cloud_firewall_ip_destination_groups:
        provider: "{{ zia_cloud }}"
        state: absent
        name: "{{ group_name }}"
      register: result

    - name: Verify Destination Group of Type DSTN_FQDN is Deleted
      ansible.builtin.assert:
        that:
          - result.changed

    - name: Delete Destination Group of Type DSTN_FQDN (again; idempotency check)
      zscaler.ziacloud.zia_cloud_firewall_ip_destination_groups:
        provider: "{{ zia_cloud }}"
        state: absent
        name: "{{ group_name }}"
      register: result

    - name: Verify Destination Group of Type DSTN_FQDN is absent
      ansible.builtin.assert:
        that:
          - not result.changed
          - result.data is defined

# IP Destination Group of Type DSTN_OTHER
- name: Ensure Destination Group of Type DSTN_OTHER (leftover)
  zscaler.ziacloud.zia_cloud_firewall_ip_destination_groups:
    provider: "{{ zia_cloud }}"
    state: absent
    name: "{{ group_name }}"
  register: result

- name: Ensure Destination Group of Type DSTN_OTHER is absent
  zscaler.ziacloud.zia_cloud_firewall_ip_destination_groups:
    provider: "{{ zia_cloud }}"
    state: absent
    name: "{{ group_name }}"
  register: result

- name: Verify Destination Group of Type DSTN_OTHER is absent
  ansible.builtin.assert:
    that:
      - not result.changed
      - result.data is defined

- name: Ensure Destination Group of Type DSTN_OTHER is (Present)
  zscaler.ziacloud.zia_cloud_firewall_ip_destination_groups:
    provider: "{{ zia_cloud }}"
    state: present
    name: "{{ group_name }}"
    description: "{{ description }}"
    type: "{{ type_dst_other }}"
    countries: "{{ countries_dst_other }}"
  register: result

- name: Verify Destination Group of Type DSTN_OTHER is present
  ansible.builtin.assert:
    that:
      - result.changed
      - result.data.name is defined

- name: Ensure Destination Group of Type DSTN_OTHER (again; idempotency check)
  zscaler.ziacloud.zia_cloud_firewall_ip_destination_groups:
    provider: "{{ zia_cloud }}"
    state: present
    name: "{{ group_name }}"
    description: "{{ description }}"
    type: "{{ type_dst_other }}"
    countries: "{{ countries_dst_other }}"
  register: result

- name: Ensure Destination Group of Type DSTN_OTHER is absent (idempotency check)
  ansible.builtin.assert:
    that:
      - result.changed

- name: Fetch all Destination Group of Type DSTN_OTHER
  zscaler.ziacloud.zia_cloud_firewall_ip_destination_groups_info:
    provider: "{{ zia_cloud }}"
  register: result

- name: Ensure all Destination Group of Type DSTN_OTHER found
  ansible.builtin.assert:
    that:
      - not result.changed
      - result.groups[0] is defined

- name: Fetch this Destination Group of Type DSTN_OTHER
  zscaler.ziacloud.zia_cloud_firewall_ip_destination_groups_info:
    provider: "{{ zia_cloud }}"
    name: "{{ group_name }}"
  register: result

- name: Ensure this Destination Group of Type DSTN_OTHER is found
  ansible.builtin.assert:
    that:
      - not result.changed
      - result.groups is defined
      - result.groups[0].name is defined
      - result.groups[0].name == group_name

- name: Give the ZIA Cloud a 5 seconds to settle
  ansible.builtin.pause:
    seconds: 5

- name: Delete Destination Group of Type DSTN_OTHER
  zscaler.ziacloud.zia_cloud_firewall_ip_destination_groups:
    provider: "{{ zia_cloud }}"
    state: absent
    name: "{{ group_name }}"
  register: result

- name: Verify Destination Group of Type DSTN_OTHER is Deleted
  ansible.builtin.assert:
    that:
      - result.changed

- name: Delete Destination Group of Type DSTN_OTHER (again; idempotency check)
  zscaler.ziacloud.zia_cloud_firewall_ip_destination_groups:
    provider: "{{ zia_cloud }}"
    state: absent
    name: "{{ group_name }}"
  register: result

- name: Verify Destination Group of Type DSTN_OTHER is absent
  ansible.builtin.assert:
    that:
      - not result.changed
      - result.data is defined

# IP Destination Group of Type DSTN_DOMAIN
- name: Ensure Destination Group of Type DSTN_DOMAIN (leftover)
  zscaler.ziacloud.zia_cloud_firewall_ip_destination_groups:
    provider: "{{ zia_cloud }}"
    state: absent
    name: "{{ group_name }}"
  register: result

- name: Ensure Destination Group of Type DSTN_DOMAIN is absent
  zscaler.ziacloud.zia_cloud_firewall_ip_destination_groups:
    provider: "{{ zia_cloud }}"
    state: absent
    name: "{{ group_name }}"
  register: result

- name: Verify Destination Group of Type DSTN_DOMAIN is absent
  ansible.builtin.assert:
    that:
      - not result.changed
      - result.data is defined

- name: Ensure Destination Group of Type DSTN_DOMAIN is (Present)
  zscaler.ziacloud.zia_cloud_firewall_ip_destination_groups:
    provider: "{{ zia_cloud }}"
    state: present
    name: "{{ group_name }}"
    description: "{{ description }}"
    type: "{{ type_dst_domain }}"
    addresses: "{{ addresses_dst_domain }}"
  register: result

- name: Verify Destination Group of Type DSTN_DOMAIN is present
  ansible.builtin.assert:
    that:
      - result.changed
      - result.data.name is defined

- name: Ensure Destination Group of Type DSTN_DOMAIN (again; idempotency check)
  zscaler.ziacloud.zia_cloud_firewall_ip_destination_groups:
    provider: "{{ zia_cloud }}"
    state: present
    name: "{{ group_name }}"
    description: "{{ description }}"
    type: "{{ type_dst_domain }}"
    addresses: "{{ addresses_dst_domain }}"
  register: result

- name: Ensure Destination Group of Type DSTN_DOMAIN is absent (idempotency check)
  ansible.builtin.assert:
    that:
      - not result.changed

- name: Fetch all Destination Group of Type DSTN_DOMAIN
  zscaler.ziacloud.zia_cloud_firewall_ip_destination_groups_info:
    provider: "{{ zia_cloud }}"
  register: result

- name: Ensure all Destination Group of Type DSTN_DOMAIN found
  ansible.builtin.assert:
    that:
      - not result.changed
      - result.groups[0] is defined

- name: Fetch this Destination Group of Type DSTN_DOMAIN
  zscaler.ziacloud.zia_cloud_firewall_ip_destination_groups_info:
    provider: "{{ zia_cloud }}"
    name: "{{ group_name }}"
  register: result

- name: Ensure this Destination Group of Type DSTN_DOMAIN is found
  ansible.builtin.assert:
    that:
      - not result.changed
      - result.groups is defined
      - result.groups[0].name is defined
      - result.groups[0].name == group_name

- name: Give the ZIA Cloud a 5 seconds to settle
  ansible.builtin.pause:
    seconds: 5

- name: Delete Destination Group of Type DSTN_DOMAIN
  zscaler.ziacloud.zia_cloud_firewall_ip_destination_groups:
    provider: "{{ zia_cloud }}"
    state: absent
    name: "{{ group_name }}"
  register: result

- name: Verify Destination Group of Type DSTN_DOMAIN is Deleted
  ansible.builtin.assert:
    that:
      - result.changed

- name: Delete Destination Group of Type DSTN_DOMAIN (again; idempotency check)
  zscaler.ziacloud.zia_cloud_firewall_ip_destination_groups:
    provider: "{{ zia_cloud }}"
    state: absent
    name: "{{ group_name }}"
  register: result

- name: Verify Destination Group of Type DSTN_DOMAIN is absent
  ansible.builtin.assert:
    that:
      - not result.changed
      - result.data is defined
