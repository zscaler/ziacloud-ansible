---
- name: Include default variables
  ansible.builtin.include_vars:
    file: ../defaults/main.yml

- name: Import Random String Generator Tasks
  ansible.builtin.import_tasks: ../../../generate_random_string.yml

- name: Set dynamic name values with random string
  ansible.builtin.set_fact:
    rule_name: "{{ rule_name }}_"
    description: "{{ description }}"

- name: Ensure required environment variables are set
  ansible.builtin.fail:
    msg: "{{ env_var }} is not defined as environment variable"
  when: lookup('env', env_var) is none
  loop:
    - ZSCALER_CLIENT_ID
    - ZSCALER_CLIENT_SECRET
    - ZSCALER_VANITY_DOMAIN
    - ZSCALER_CLOUD
  loop_control:
    loop_var: env_var

- name: Ensure ZIA Credential environment variables are set
  ansible.builtin.set_fact:
    zia_cloud:
      client_id: "{{ lookup('env', 'ZSCALER_CLIENT_ID') }}"
      client_secret: "{{ lookup('env', 'ZSCALER_CLIENT_SECRET') }}"
      vanity_domain: "{{ lookup('env', 'ZSCALER_VANITY_DOMAIN') }}"
      cloud: "{{ lookup('env', 'ZSCALER_CLOUD') | default(omit) }}"
  no_log: true

- name: Main block for DLP Web Rule Configuration
  block:
    - name: Ensure Cloud Web DLP Rule (leftover)
      zscaler.ziacloud.zia_dlp_web_rules:
        provider: "{{ zia_cloud }}"
        state: absent
        name: "{{ rule_name }}"
      register: result

  rescue:
    - name: Handle errors
      ansible.builtin.debug:
        msg: An error occurred.

  always:
    - name: Cleanup operations
      ansible.builtin.debug:
        msg: Cleanup complete.

    - name: Ensure Cloud Web DLP Rule is absent
      zscaler.ziacloud.zia_dlp_web_rules:
        provider: "{{ zia_cloud }}"
        state: absent
        name: "{{ rule_name }}"
      register: result

    - name: Verify Cloud Web DLP Rule is absent
      ansible.builtin.assert:
        that:
          - not result.changed
          - result.data is defined

    - name: Ensure Cloud Web DLP Rule is (Present)
      zscaler.ziacloud.zia_dlp_web_rules:
        provider: "{{ zia_cloud }}"
        state: present
        name: "{{ rule_name }}"
        description: "{{ description }}"
        action: "{{ rule_action }}"
        order: "{{ rule_order }}"
        rank: "{{ rank }}"
        enabled: "{{ enabled }}"
        without_content_inspection: "{{ without_content_inspection }}"
        zscaler_incident_receiver: "{{ zscaler_incident_receiver }}"
        user_risk_score_levels: "{{ user_risk_score_levels }}"
        protocols: "{{ protocols }}"
        file_types: "{{ file_types }}"
      register: result

    - name: Verify Cloud Web DLP Rule is present
      ansible.builtin.assert:
        that:
          - result.changed
          - result.data is defined
          - result.data.name is defined

    - name: Ensure Cloud Web DLP Rule (again; idempotency check)
      zscaler.ziacloud.zia_dlp_web_rules:
        provider: "{{ zia_cloud }}"
        state: present
        name: "{{ rule_name }}"
        description: "{{ description }}"
        action: "{{ rule_action }}"
        order: "{{ rule_order }}"
        rank: "{{ rank }}"
        enabled: "{{ enabled }}"
        without_content_inspection: "{{ without_content_inspection }}"
        zscaler_incident_receiver: "{{ zscaler_incident_receiver }}"
        user_risk_score_levels: "{{ user_risk_score_levels }}"
        protocols: "{{ protocols }}"
        file_types: "{{ file_types }}"
      register: result

    - name: Ensure Cloud Web DLP Rule is absent (idempotency check)
      ansible.builtin.assert:
        that:
          - result.changed

    - name: Fetch all Cloud Web DLP Rule
      zscaler.ziacloud.zia_dlp_web_rules_info:
        provider: "{{ zia_cloud }}"
      register: result

    - name: Ensure all Cloud Web DLP Rule found
      ansible.builtin.assert:
        that:
          - not result.changed
          - result.rules[0] is defined

    - name: Update Cloud Web DLP Rule is (Present)
      zscaler.ziacloud.zia_dlp_web_rules:
        provider: "{{ zia_cloud }}"
        state: present
        name: "{{ rule_name }}"
        description: "{{ description }}"
        action: "{{ action_update }}"
        order: "{{ order_update }}"
        rank: "{{ rank_update }}"
        enabled: "{{ enabled_update }}"
        without_content_inspection: "{{ without_content_inspection_update }}"
        zscaler_incident_receiver: "{{ zscaler_incident_receiver_update }}"
        user_risk_score_levels: "{{ user_risk_score_levels_update }}"
        protocols: "{{ protocols_update }}"
        file_types: "{{ file_types_update }}"
      register: result

    - name: Verify Cloud Web DLP Rule is present
      ansible.builtin.assert:
        that:
          - result.changed
          - result.data is defined
          - result.data.name == rule_name
          - result.data.description == description
          - result.data.action == action_update

    - name: Ensure Cloud Web DLP Rule is Updated (again; idempotency check)
      zscaler.ziacloud.zia_dlp_web_rules:
        provider: "{{ zia_cloud }}"
        state: present
        name: "{{ rule_name }}"
        description: "{{ description }}"
        action: "{{ action_update }}"
        order: "{{ order_update }}"
        rank: "{{ rank_update }}"
        enabled: "{{ enabled_update }}"
        without_content_inspection: "{{ without_content_inspection_update }}"
        zscaler_incident_receiver: "{{ zscaler_incident_receiver_update }}"
        user_risk_score_levels: "{{ user_risk_score_levels_update }}"
        protocols: "{{ protocols_update }}"
        file_types: "{{ file_types_update }}"
      register: result

    - name: Ensure Cloud Web DLP Rule is absent (idempotency check)
      ansible.builtin.assert:
        that:
          - result.changed

    - name: Fetch all Cloud Web DLP Rule
      zscaler.ziacloud.zia_dlp_web_rules_info:
        provider: "{{ zia_cloud }}"
      register: result

    - name: Ensure all Cloud Web DLP Rule found
      ansible.builtin.assert:
        that:
          - not result.changed
          - result.rules[0] is defined

    - name: Fetch this Cloud Web DLP Rule
      zscaler.ziacloud.zia_dlp_web_rules_info:
        provider: "{{ zia_cloud }}"
        name: "{{ rule_name }}"
      register: result

    - name: Ensure this Cloud Web DLP Rule is found
      ansible.builtin.assert:
        that:
          - not result.changed
          - result.rules is defined
          - result.rules[0].name is defined
          - result.rules[0].name == rule_name

    - name: Give the ZIA Cloud a 5 seconds to settle
      ansible.builtin.pause:
        seconds: 5

    - name: Delete Cloud Web DLP Rule
      zscaler.ziacloud.zia_dlp_web_rules:
        provider: "{{ zia_cloud }}"
        state: absent
        name: "{{ rule_name }}"
        order: "{{ rule_order }}"
      register: result

    - name: Verify Cloud Web DLP Rule is Deleted
      ansible.builtin.assert:
        that:
          - result.changed

    - name: Delete Cloud Web DLP Rule (again; idempotency check)
      zscaler.ziacloud.zia_dlp_web_rules:
        provider: "{{ zia_cloud }}"
        state: absent
        name: "{{ rule_name }}"
        order: "{{ rule_order }}"
      register: result

    - name: Verify Cloud Web DLP Rule is absent
      ansible.builtin.assert:
        that:
          - not result.changed
          - result.data is defined
