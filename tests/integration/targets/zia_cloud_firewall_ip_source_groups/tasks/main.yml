---
- name: Include default variables
  ansible.builtin.include_vars:
    file: ../defaults/main.yml

- name: Import Random String Generator Tasks
  ansible.builtin.import_tasks: ../../../generate_random_string.yml

- name: Set dynamic name values with random string
  ansible.builtin.set_fact:
    group_name: "{{ group_name }}_{{ random_string }}"
    description: "{{ description }}_{{ random_string }}"

- name: Ensure required environment variables are set
  ansible.builtin.fail:
    msg: "{{ env_var }} is not defined as environment variable"
  when: lookup('env', env_var) is none
  loop:
    - ZSCALER_CLIENT_ID
    - ZSCALER_CLIENT_SECRET
    - ZSCALER_VANITY_DOMAIN
    - ZSCALER_CLOUD
  loop_control:
    loop_var: env_var

- name: Ensure ZIA Credential environment variables are set
  ansible.builtin.set_fact:
    zia_cloud:
      client_id: "{{ lookup('env', 'ZSCALER_CLIENT_ID') }}"
      client_secret: "{{ lookup('env', 'ZSCALER_CLIENT_SECRET') }}"
      vanity_domain: "{{ lookup('env', 'ZSCALER_VANITY_DOMAIN') }}"
      cloud: "{{ lookup('env', 'ZSCALER_CLOUD') | default(omit) }}"
  no_log: true

- name: Main block to Test Cloud Firewall IP Source Group Configuration
  block:
    # Initial cleanup to ensure no residual state
    - name: Initial cleanup of IP Source Group (leftover)
      zscaler.ziacloud.zia_cloud_firewall_ip_source_groups:
        provider: "{{ zia_cloud }}"
        state: absent
        name: "{{ group_name }}"
        ip_addresses: "{{ ip_addresses }}"
      register: result_initial_cleanup

    - name: Debug initial cleanup result
      ansible.builtin.debug:
        var: result_initial_cleanup

    - name: Pause to allow ZIA Cloud to settle after initial cleanup
      ansible.builtin.pause:
        seconds: 5

    # Main Test Block
    - name: Ensure IP Source Group (leftover)
      zscaler.ziacloud.zia_cloud_firewall_ip_source_groups:
        provider: "{{ zia_cloud }}"
        state: absent
        name: "{{ group_name }}"
        ip_addresses: "{{ ip_addresses }}"
      register: result_cleanup

    - name: Debug cleanup result
      ansible.builtin.debug:
        var: result_cleanup

  rescue:
    - name: Handle errors
      ansible.builtin.debug:
        msg: An error occurred.

  always:
    - name: Cleanup operations
      ansible.builtin.debug:
        msg: Cleanup complete.

    - name: Ensure IP Source Group is absent
      zscaler.ziacloud.zia_cloud_firewall_ip_source_groups:
        provider: "{{ zia_cloud }}"
        state: absent
        name: "{{ group_name }}"
        ip_addresses: "{{ ip_addresses }}"
      register: result_ensure_absent

    - name: Debug ensure absent result
      ansible.builtin.debug:
        var: result_ensure_absent

    - name: Verify IP Source Group is absent
      ansible.builtin.assert:
        that:
          - not result_ensure_absent.changed
          - result_ensure_absent.data is defined

    - name: Pause to allow ZIA Cloud to settle after ensure absent
      ansible.builtin.pause:
        seconds: 5

    - name: Ensure IP Source Group is present
      zscaler.ziacloud.zia_cloud_firewall_ip_source_groups:
        provider: "{{ zia_cloud }}"
        state: present
        name: "{{ group_name }}"
        description: "{{ description }}"
        ip_addresses: "{{ ip_addresses }}"
      register: result_present

    # - name: Debug ensure present result
    #   ansible.builtin.debug:
    #     var: result_present

    - name: Verify IP Source Group is present
      ansible.builtin.assert:
        that:
          - result_present.changed
          - result_present.data.name is defined

    - name: Ensure IP Source Group (again; idempotency check)
      zscaler.ziacloud.zia_cloud_firewall_ip_source_groups:
        provider: "{{ zia_cloud }}"
        state: present
        name: "{{ group_name }}"
        description: "{{ description }}"
        ip_addresses: "{{ ip_addresses }}"
      register: result_idempotency_present

    - name: Verify IP Source Group is absent (idempotency check)
      ansible.builtin.assert:
        that:
          - result_idempotency_present.changed

    - name: Fetch all IP Source Group
      zscaler.ziacloud.zia_cloud_firewall_ip_source_groups_info:
        provider: "{{ zia_cloud }}"
      register: result_fetch_all

    - name: Debug fetch all result
      ansible.builtin.debug:
        var: result_fetch_all

    - name: Ensure all IP Source Group found
      ansible.builtin.assert:
        that:
          - not result_fetch_all.changed
          - result_fetch_all.groups[0] is defined

    - name: Fetch this IP Source Group
      zscaler.ziacloud.zia_cloud_firewall_ip_source_groups_info:
        provider: "{{ zia_cloud }}"
        name: "{{ group_name }}"
      register: result_fetch_this

    - name: Debug fetch this result
      ansible.builtin.debug:
        var: result_fetch_this

    - name: Ensure this IP Source Group is found
      ansible.builtin.assert:
        that:
          - not result_fetch_this.changed
          - result_fetch_this.groups is defined
          - result_fetch_this.groups[0].name is defined
          - result_fetch_this.groups[0].name == group_name

    - name: Give the ZIA Cloud a 5 seconds to settle
      ansible.builtin.pause:
        seconds: 5

    - name: Delete IP Source Group
      zscaler.ziacloud.zia_cloud_firewall_ip_source_groups:
        provider: "{{ zia_cloud }}"
        state: absent
        name: "{{ group_name }}"
        ip_addresses: "{{ ip_addresses }}"
      register: result_delete

    - name: Debug delete result
      ansible.builtin.debug:
        var: result_delete

    - name: Verify IP Source Group is Deleted
      ansible.builtin.assert:
        that:
          - result_delete.changed

    - name: Delete IP Source Group (again; idempotency check)
      zscaler.ziacloud.zia_cloud_firewall_ip_source_groups:
        provider: "{{ zia_cloud }}"
        state: absent
        name: "{{ group_name }}"
        ip_addresses: "{{ ip_addresses }}"
      register: result_idempotency_delete

    - name: Debug delete again result
      ansible.builtin.debug:
        var: result_idempotency_delete

    - name: Verify IP Source Group is absent
      ansible.builtin.assert:
        that:
          - not result_idempotency_delete.changed
          - result_idempotency_delete.data is defined
