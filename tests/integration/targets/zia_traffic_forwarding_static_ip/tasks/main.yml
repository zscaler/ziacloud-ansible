---
- name: Include default variables
  ansible.builtin.include_vars:
    file: ../defaults/main.yml

- name: Import Random String Generator Tasks
  ansible.builtin.import_tasks: ../../../generate_random_string.yml

- name: Set dynamic comment values with random string
  ansible.builtin.set_fact:
    comment: "{{ comment }}_{{ random_string }}"
    comment_update: "{{ comment_update }}_{{ random_string }}"

- name: Ensure required environment variables are set
  ansible.builtin.fail:
    msg: "{{ env_var }} is not defined as environment variable"
  when: lookup('env', env_var) is none
  loop:
    - ZSCALER_CLIENT_ID
    - ZSCALER_CLIENT_SECRET
    - ZSCALER_VANITY_DOMAIN
    - ZSCALER_CLOUD
  loop_control:
    loop_var: env_var

- name: Ensure ZIA Credential environment variables are set
  ansible.builtin.set_fact:
    zia_cloud:
      client_id: "{{ lookup('env', 'ZSCALER_CLIENT_ID') }}"
      client_secret: "{{ lookup('env', 'ZSCALER_CLIENT_SECRET') }}"
      vanity_domain: "{{ lookup('env', 'ZSCALER_VANITY_DOMAIN') }}"
      cloud: "{{ lookup('env', 'ZSCALER_CLOUD') | default(omit) }}"
  no_log: true

- name: Main block for Static IP Address Configuration
  block:
    # Static IP Address
    - name: Ensure Static IP Address (leftover)
      zscaler.ziacloud.zia_traffic_forwarding_static_ip:
        provider: "{{ zia_cloud }}"
        state: absent
        ip_address: "{{ ip_address }}"
        routable_ip: "{{ routable_ip }}"
        comment: "{{ comment }}"
        geo_override: "{{ geo_override }}"
        latitude: "{{ latitude }}"
        longitude: "{{ longitude }}"
      register: result

  rescue:
    - name: Handle errors
      ansible.builtin.debug:
        msg: An error occurred.

  always:
    - name: Cleanup operations
      ansible.builtin.debug:
        msg: Cleanup complete.

    - name: Ensure Static IP Address is absent
      zscaler.ziacloud.zia_traffic_forwarding_static_ip:
        provider: "{{ zia_cloud }}"
        state: absent
        ip_address: "{{ ip_address }}"
        routable_ip: "{{ routable_ip }}"
        comment: "{{ comment }}"
        geo_override: "{{ geo_override }}"
        latitude: "{{ latitude }}"
        longitude: "{{ longitude }}"
      register: result

    - name: Verify Static IP Address is absent
      ansible.builtin.assert:
        that:
          - not result.changed
          - result.data is defined

    - name: Ensure Static IP Address is (Present)
      zscaler.ziacloud.zia_traffic_forwarding_static_ip:
        provider: "{{ zia_cloud }}"
        state: present
        ip_address: "{{ ip_address }}"
        routable_ip: "{{ routable_ip }}"
        comment: "{{ comment }}"
        geo_override: "{{ geo_override }}"
        latitude: "{{ latitude }}"
        longitude: "{{ longitude }}"
      register: result

    - name: Verify Static IP Address is present
      ansible.builtin.assert:
        that:
          - result.changed
          - result.data.ip_address is defined

    - name: Ensure Static IP Address (again; idempotency check)
      zscaler.ziacloud.zia_traffic_forwarding_static_ip:
        provider: "{{ zia_cloud }}"
        state: present
        ip_address: "{{ ip_address }}"
        routable_ip: "{{ routable_ip }}"
        comment: "{{ comment }}"
        geo_override: "{{ geo_override }}"
        latitude: "{{ latitude }}"
        longitude: "{{ longitude }}"
      register: result

    - name: Ensure Static IP Address is present (idempotency check)
      ansible.builtin.assert:
        that:
          - not result.changed

    # - name: Update Static IP Address (Present)
    #   zscaler.ziacloud.zia_traffic_forwarding_static_ip:
    #     provider: "{{ zia_cloud }}"
    #     state: present
    #     ip_address: "{{ ip_address }}"
    #     routable_ip: "{{ routable_ip }}"
    #     comment: "{{ comment_update }}"
    #     geo_override: false
    #     latitude: "{{ latitude }}"
    #     longitude: "{{ longitude }}"
    #   register: result

    # - name: Verify Static IP Address is Updated
    #   ansible.builtin.assert:
    #     that:
    #       - result.changed
    #       - result.data is defined
    #       - result.data.comment == comment_update
    #       - result.data.geo_override == false

    # - name: Update Static IP Address (again; idempotency check)
    #   zscaler.ziacloud.zia_traffic_forwarding_static_ip:
    #     provider: "{{ zia_cloud }}"
    #     state: present
    #     ip_address: "{{ ip_address }}"
    #     routable_ip: "{{ routable_ip }}"
    #     comment: "{{ comment_update }}"
    #     geo_override: false
    #     latitude: "{{ latitude }}"
    #     longitude: "{{ longitude }}"
    #   register: result

    # - name: Ensure Static IP update is idempotent
    #   ansible.builtin.assert:
    #     that:
    #       - not result.changed

    - name: Fetch all Static IP Address
      zscaler.ziacloud.zia_traffic_forwarding_static_ip_info:
        provider: "{{ zia_cloud }}"
      register: result

    - name: Ensure all Static IP Address found
      ansible.builtin.assert:
        that:
          - not result.changed
          - result.static_ips[0] is defined

    - name: Fetch this Static IP Address
      zscaler.ziacloud.zia_traffic_forwarding_static_ip_info:
        provider: "{{ zia_cloud }}"
        ip_address: "{{ ip_address }}"
      register: result

    - name: Ensure this Static IP Address is found
      ansible.builtin.assert:
        that:
          - not result.changed
          - result.static_ips is defined
          - result.static_ips[0].ip_address is defined
          - result.static_ips[0].ip_address == ip_address

    - name: Give the ZIA Cloud a 5 seconds to settle
      ansible.builtin.pause:
        seconds: 5

    - name: Delete Static IP Address
      zscaler.ziacloud.zia_traffic_forwarding_static_ip:
        provider: "{{ zia_cloud }}"
        state: absent
        ip_address: "{{ ip_address }}"
        routable_ip: "{{ routable_ip }}"
        comment: "{{ comment }}"
        geo_override: "{{ geo_override }}"
        latitude: "{{ latitude }}"
        longitude: "{{ longitude }}"
      register: result

    - name: Verify Static IP Address is Deleted
      ansible.builtin.assert:
        that:
          - result.changed

    - name: Delete Static IP Address (again; idempotency check)
      zscaler.ziacloud.zia_traffic_forwarding_static_ip:
        provider: "{{ zia_cloud }}"
        state: absent
        ip_address: "{{ ip_address }}"
        routable_ip: "{{ routable_ip }}"
        comment: "{{ comment }}"
        geo_override: "{{ geo_override }}"
        latitude: "{{ latitude }}"
        longitude: "{{ longitude }}"
      register: result

    - name: Verify Static IP Address is absent
      ansible.builtin.assert:
        that:
          - not result.changed
          - result.data is defined
