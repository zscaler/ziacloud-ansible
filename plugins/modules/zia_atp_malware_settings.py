#!/usr/bin/python
# -*- coding: utf-8 -*-
#
# Copyright (c) 2023 Zscaler Inc, <devrel@zscaler.com>

#                             MIT License
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

from __future__ import absolute_import, division, print_function

__metaclass__ = type

DOCUMENTATION = r"""
---
module: zia_atp_malware_settings
short_description: "Updates the malware protection policy configuration details."
description:
  - "Updates the malware protection policy configuration details."
author:
  - William Guilherme (@willguibr)
version_added: "2.0.0"
requirements:
    - Zscaler SDK Python can be obtained from PyPI U(https://pypi.org/project/zscaler-sdk-python/)
notes:
    - Check mode is not supported.
extends_documentation_fragment:
  - zscaler.ziacloud.fragments.provider
  - zscaler.ziacloud.fragments.documentation
  - zscaler.ziacloud.fragments.modified_state

options:
  virus_blocked:
    description:
      - Indicates if malicious programs that cause damage to systems and data are allowed or blocked.
      - This setting applies to any viruses that don't fit into the more specific malware categories.
    type: bool
    required: false
  virus_capture:
    description: Indicates whether packet capture (PCAP) is enabled or disabled for viruses
    type: bool
    required: false
  unwanted_applications_blocked:
    description: Allows or blocks unwanted files that are downloaded alongside intentional programs downloaded by users
    type: bool
    required: false
  unwanted_applications_capture:
    description: Indicates whether packet capture (PCAP) is enabled or disabled for unwanted applications
    type: bool
    required: false
  trojan_blocked:
    description: Allows or blocks malicious programs such as Trojan viruses that are presented as beneficial or useful
    type: bool
    required: false
  trojan_capture:
    description: Indicates whether packet capture (PCAP) is enabled or disabled for Trojan viruses
    type: bool
    required: false
  worm_blocked:
    description: Indicates whether malicious programs that duplicate themselves to spread malicious code to other devices are allowed or blocked
    type: bool
    required: false
  worm_capture:
    description: Indicates whether packet capture (PCAP) is enabled or disabled for worms
    type: bool
    required: false
  adware_blocked:
    description: Indicates whether malicious files that automatically render advertisements and install adware are allowed or blocked
    type: bool
    required: false
  adware_capture:
    description: Indicates whether packet capture (PCAP) is enabled or disabled for adware
    type: bool
    required: false
  spyware_blocked:
    description: Indicates whether malicious files that covertly gather information about a user or an organization are allowed or blocked
    type: bool
    required: false
  spyware_capture:
    description: Indicates whether packet capture (PCAP) is enabled or disabled for spyware
    type: bool
    required: false
  ransomware_blocked:
    description:
      - Indicates whether to allow or block malicious programs that can encrypt files and
      - prevent users from accessing their devices, files, or data until a ransom payment is made.
    type: bool
    required: false
  ransomware_capture:
    description: Indicates whether packet capture (PCAP) is enabled or disabled for ransomware
    type: bool
    required: false
  remote_access_tool_blocked:
    description: Indicates whether to allow or block file download from tools that are common from remote access sites
    type: bool
    required: false
  remote_access_tool_capture:
    description: Indicates whether packet capture (PCAP) is enabled or disabled for remote access tools
    type: bool
    required: false
"""

EXAMPLES = r"""
- name: Updates the malware protection policy configuration details
  zscaler.ziacloud.zia_atp_malware_settings:
    provider: '{{ provider }}'
    adware_blocked: true
    adware_capture: false
    ransomware_blocked: true
    ransomware_capture: false
    remote_access_tool_blocked: true
    remote_access_tool_capture: false
    spyware_blocked: true
    spyware_capture: false
    trojan_blocked: true
    trojan_capture: false
    unwanted_applications_blocked: true
    unwanted_applications_capture: false
    virus_blocked: true
    virus_capture: false
    worm_blocked: true
    worm_capture: false
"""

RETURN = r"""
#  Malware Settings Configured.
"""

from traceback import format_exc
from ansible.module_utils._text import to_native
from ansible.module_utils.basic import AnsibleModule
from ansible_collections.zscaler.ziacloud.plugins.module_utils.zia_client import (
    ZIAClientHelper,
)
from ansible_collections.zscaler.ziacloud.plugins.module_utils.utils import (
    convert_keys_to_snake_case,
)


def core(module):
    state = module.params.get("state")
    if state != "present":
        module.fail_json(msg="Only 'present' is supported for this module.")

    client = ZIAClientHelper(module)

    # Define the supported malware fields
    params = [
        "virus_blocked",
        "virus_capture",
        "unwanted_applications_blocked",
        "unwanted_applications_capture",
        "trojan_blocked",
        "trojan_capture",
        "worm_blocked",
        "worm_capture",
        "adware_blocked",
        "adware_capture",
        "spyware_blocked",
        "spyware_capture",
        "ransomware_blocked",
        "ransomware_capture",
        "remote_access_tool_blocked",
        "remote_access_tool_capture",
    ]

    # Filter only explicitly set values
    settings_data = {
        k: module.params.get(k) for k in params if module.params.get(k) is not None
    }

    current_settings, _unused, error = (
        client.malware_protection_policy.get_malware_settings()
    )
    if error:
        module.fail_json(msg=f"Error fetching malware settings: {to_native(error)}")

    # Extract raw config from SDK and convert keys to snake_case
    raw_response = getattr(current_settings, "_raw_config", {})
    current_dict = convert_keys_to_snake_case(raw_response)

    drift = any(current_dict.get(k) != settings_data.get(k) for k in settings_data)

    module.warn(f"üì¶ Raw SDK response: {current_settings}")
    module.warn(f"üêç Snake_case converted: {current_dict}")
    module.warn(f"üîç Current settings: {current_dict}")
    module.warn(f"üì• Desired settings: {settings_data}")
    module.warn(f"üß† Drift detected: {drift}")

    if module.check_mode:
        module.exit_json(changed=drift)

    if drift:
        for k, v in settings_data.items():
            setattr(current_settings, k, v)

        updated, _unused, error = (
            client.malware_protection_policy.update_malware_settings(current_settings)
        )
        if error:
            module.fail_json(msg=f"Error updating malware settings: {to_native(error)}")

        module.exit_json(changed=True, malware_settings=updated.as_dict())

    module.exit_json(changed=False, malware_settings=current_dict)


def main():
    argument_spec = ZIAClientHelper.zia_argument_spec()
    argument_spec.update(
        virus_blocked=dict(type="bool", required=False),
        virus_capture=dict(type="bool", required=False),
        unwanted_applications_blocked=dict(type="bool", required=False),
        unwanted_applications_capture=dict(type="bool", required=False),
        trojan_blocked=dict(type="bool", required=False),
        trojan_capture=dict(type="bool", required=False),
        worm_blocked=dict(type="bool", required=False),
        worm_capture=dict(type="bool", required=False),
        adware_blocked=dict(type="bool", required=False),
        adware_capture=dict(type="bool", required=False),
        spyware_blocked=dict(type="bool", required=False),
        spyware_capture=dict(type="bool", required=False),
        ransomware_blocked=dict(type="bool", required=False),
        ransomware_capture=dict(type="bool", required=False),
        remote_access_tool_blocked=dict(type="bool", required=False),
        remote_access_tool_capture=dict(type="bool", required=False),
        state=dict(type="str", choices=["present"], default="present"),
    )

    module = AnsibleModule(argument_spec=argument_spec, supports_check_mode=True)

    try:
        core(module)
    except Exception as e:
        module.fail_json(msg=to_native(e), exception=format_exc())


if __name__ == "__main__":
    main()
