#!/usr/bin/python
# -*- coding: utf-8 -*-
#
# Copyright (c) 2023 Zscaler Inc, <devrel@zscaler.com>

#                             MIT License
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

from __future__ import absolute_import, division, print_function

__metaclass__ = type

DOCUMENTATION = r"""
---
module: zia_atp_malware_protocols
short_description: "Updates the protocol inspection configurations of Malware Protection policy"
description:
  - "Updates the protocol inspection configurations of Malware Protection policy"
author:
  - William Guilherme (@willguibr)
version_added: "2.0.0"
requirements:
    - Zscaler SDK Python can be obtained from PyPI U(https://pypi.org/project/zscaler-sdk-python/)
notes:
    - Check mode is not supported.
extends_documentation_fragment:
  - zscaler.ziacloud.fragments.provider
  - zscaler.ziacloud.fragments.documentation
  - zscaler.ziacloud.fragments.modified_state

options:
  inspect_http:
    description: Enables or disables scanning of HTTP traffic (and HTTPS traffic if SSL Inspection is enabled) for malicious content in real time
    type: bool
    required: false
  inspect_ftp_over_http:
    description: Enables or disables scanning of FTP over HTTP traffic for malicious content in real time
    required: false
    type: bool
  inspect_ftp:
    description: Enables or disables scanning of FTP traffic for malicious content in real time
    required: false
    type: bool
"""

EXAMPLES = r"""
- name: Updates the protocol inspection configurations of Malware Protection policy
  zscaler.ziacloud.zia_atp_malware_protocols:
    provider: '{{ provider }}'
    inspect_http: true
    inspect_ftp_over_http: true
    inspect_ftp: true
"""

RETURN = r"""
#  Malware Protocols Configured.
"""

from traceback import format_exc
from ansible.module_utils._text import to_native
from ansible.module_utils.basic import AnsibleModule
from ansible_collections.zscaler.ziacloud.plugins.module_utils.zia_client import (
    ZIAClientHelper,
)


def core(module):
    state = module.params.get("state")
    if state != "present":
        module.fail_json(msg="Only 'present' is supported for this module.")

    client = ZIAClientHelper(module)
    inspect_http = module.params.get("inspect_http")
    inspect_ftp_over_http = module.params.get("inspect_ftp_over_http")
    inspect_ftp = module.params.get("inspect_ftp")

    current_policy, _unused, error = (
        client.malware_protection_policy.get_atp_malware_protocols()
    )
    if error:
        module.fail_json(
            msg=f"Error fetching malware protocol policy: {to_native(error)}"
        )

    current_http = current_policy.get("inspect_http", False)
    current_ftp_http = current_policy.get("inspect_ftp_over_http", False)
    current_ftp = current_policy.get("inspect_ftp", False)

    module.warn(
        f"üîç Current policy: inspect_http={current_http}, inspect_ftp_over_http={current_ftp_http}, inspect_ftp={current_ftp}"
    )
    module.warn(
        f"üì• Desired policy: inspect_http={inspect_http}, inspect_ftp_over_http={inspect_ftp_over_http}, inspect_ftp={inspect_ftp}"
    )

    if module.check_mode:
        has_drift = (
            inspect_http != current_http
            or inspect_ftp_over_http != current_ftp_http
            or inspect_ftp != current_ftp
        )
        module.exit_json(changed=has_drift)

    if (
        inspect_http != current_http
        or inspect_ftp_over_http != current_ftp_http
        or inspect_ftp != current_ftp
    ):
        updated_policy, _unused, error = (
            client.malware_protection_policy.update_atp_malware_protocols(
                inspect_http, inspect_ftp_over_http, inspect_ftp
            )
        )
        if error:
            module.fail_json(
                msg=f"Error updating malware protocol policy: {to_native(error)}"
            )

        module.exit_json(changed=True, malware_protocols=updated_policy)

    module.exit_json(changed=False, malware_protocols=current_policy)


def main():
    argument_spec = ZIAClientHelper.zia_argument_spec()
    argument_spec.update(
        inspect_http=dict(type="bool", required=False),
        inspect_ftp_over_http=dict(type="bool", required=False),
        inspect_ftp=dict(type="bool", required=False),
        state=dict(type="str", choices=["present"], default="present"),
    )

    module = AnsibleModule(argument_spec=argument_spec, supports_check_mode=True)

    try:
        core(module)
    except Exception as e:
        module.fail_json(msg=to_native(e), exception=format_exc())


if __name__ == "__main__":
    main()
